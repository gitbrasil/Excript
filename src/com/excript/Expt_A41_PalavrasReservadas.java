/**
 * Aula 41 - Palavras Chaves em Java
 * set 20, 2017 - Learning Java-Netbeans
 * sergio.torres@outlook.com
 */
package com.excript;

public class Expt_A41_PalavrasReservadas {

    public static void main(String[] args) {

        System.out.println(""
                + "Modificadores de acesso:\n"
                + "\n"
                + "·    private: Faz com que um método ou variável possa ser acessado somente de dentro da própria classe;\n"
                + "\n"
                + "·    protected: Faz com que um método ou variável possa ser acessado somente por classes do mesmo pacote ou por subclasses da classe;\n"
                + "\n"
                + "·    public: Faz com que uma classe, método ou variável possa ser acessado a partir de qualquer outra classe.\n"
                + "\n"
                + "\n"
                + "Modificadores de classe, método e variável:\n"
                + "\n"
                + "·    abstract: Usada para declarar uma classe que não pode ser instanciada ou método que deve ser implementado por subclasses concretas;\n"
                + "\n"
                + "·    class: Palavra chave para identificar uma classe;\n"
                + "\n"
                + "·    extends: Usada para estender uma classe a outra, isto é, indicar para uma superclasse que uma subclasse está estendendo, (herança);\n"
                + "\n"
                + "·    final: Vimos no artigo anterior, torna impossível estender uma classe, sobrepor um método ou reiniciar uma variável;\n"
                + "\n"
                + "·    implements: Usada para indicar a uma interface que uma classe a implementará;\n"
                + "\n"
                + "·    interface: Palavra chave para identificar uma interface;\n"
                + "\n"
                + "·    native: Indica que um método foi escrito em uma linguagem que só pode ser usada em uma plataforma, exemplo o C++;\n"
                + "\n"
                + "·    new: Usada para instanciar um objeto;\n"
                + "\n"
                + "·    static: Indica que o método ou a variável pertence a classe e não a instancia;\n"
                + "\n"
                + "·    strictfp: Usada na frente de um método para indicar que os números de ponto flutuantes seguirão regras restritas de ponto flutuante em todas as expressões;\n"
                + "\n"
                + "·    syncronized: Indica que um método só pode ser acessado por um seguimento de cada vez;\n"
                + "\n"
                + "·    transient: Impede que os campos sejam serializados;\n"
                + "\n"
                + "·    volatile: Indica que a variável pode não ficar sincronizada por ser usada em fragmentos.\n"
                + "\n"
                + "\n"
                + "Controle de fluxo:\n"
                + "\n"
                + "·    break: Faz o fluxo sair do bloco do código onde a palavra foi inserida.\n"
                + "\n"
                + "·    case: Executa um bloco de código dependendo da instrução switch.\n"
                + "\n"
                + "·    continue: Faz com que o código existente após essa instrução não seja executado em um loop, indicando a próxima interação do loop.\n"
                + "\n"
                + "·    default: Executará esse bloco de código se nenhuma das instruções switch/case for atendida.\n"
                + "\n"
                + "·    do: Executa um bloco de código um vez e, em seguida junto com a instrução while, processa um teste para determinar se o bloco deve ser executado novamente.\n"
                + "\n"
                + "·    else: Executa um bloco de código alternativo se uma condição if for falsa.\n"
                + "\n"
                + "·    for: Usada para executar um loop condicional em um bloco de código.\n"
                + "\n"
                + "·    if: Usada para executar um teste lógico verdadeiro ou falso.\n"
                + "\n"
                + "·    instanceof: Determina se um objeto é a instancia de uma classe, superclasse ou interface.\n"
                + "\n"
                + "·    return: Faz o fluxo sair de um método sem executar nenhum código que seja após a instrução (pode retornar uma variável opcionalmente);\n"
                + "\n"
                + "·    switch: Indica a variável a ser confrontada com as instruções case.\n"
                + "\n"
                + "·    while: Executa um bloco de código repetidamente, enquanto um certa condição for verdadeira.\n"
                + "\n"
                + "\n"
                + "Tratamento de Erros:\n"
                + "\n"
                + "·    catch: Declara o bloco de código usado para tratar uma execução.\n"
                + "\n"
                + "·    finally: Bloco de código, geralmente após uma instrução try-catch, que vai ser executado independente de que fluxo do programa for usado no tratamento de uma exceção.\n"
                + "\n"
                + "·    throw: Usada para passar uma execução para o método que chamou o método atual.\n"
                + "\n"
                + "·    throws: Indica o método que passará uma execução para o método que o chamou.\n"
                + "\n"
                + "·    try: Bloco de código que será executado, podendo, porém, causar uma exceção.\n"
                + "\n"
                + "·    assert: Avalia uma expressão condicional para verificar as alternativas do programador.\n"
                + "\n"
                + "\n"
                + "Controle de Pacotes:\n"
                + "\n"
                + "·    import: Fala-se que é para importar pacotes ou classes para o código, o que não é verdade, veremos mais a frente.\n"
                + "\n"
                + "·    package: Especifica a que pacote todas as classes de um arquivo fonte pertence.\n"
                + "\n"
                + "\n"
                + "Primitivas:\n"
                + "\n"
                + "·    boolean: Verdadeiro ou Falso;\n"
                + "\n"
                + "·    byte: Inteiro de 8 bits (com sinal);\n"
                + "\n"
                + "·    char: Unidade Unicode (de 16 bits, sem o sinal);\n"
                + "\n"
                + "·    double: Número de ponto flutuante com 64 bits (com sinal);\n"
                + "\n"
                + "·    float: Número de ponto flutuante com 32 bits (com sinal);\n"
                + "\n"
                + "·    int: Número inteiro de 32 bits (com sinal);\n"
                + "\n"
                + "·    long: Número inteiro de 64 bits (com sinal);\n"
                + "\n"
                + "·    short: Número inteiro de 16 bits (com sinal);\n"
                + "\n"
                + "\n"
                + "Palavras chaves de variáveis:\n"
                + "\n"
                + "·    super: Variável de referência que diz respeito a superclasse imediata;\n"
                + "\n"
                + "·    this: Variável de referência que diz respeito a instancia atual de um objeto;\n"
                + "\n"
                + "\n"
                + "Palavra void para tipos retornados:\n"
                + "\n"
                + "·    void: Indica que não há um tipo de retorno para o método.\n"
                + "\n"
                + "\n"
                + "Palavras reservadas não utilizadas:\n"
                + "\n"
                + "·    const: Não use esta palavra para declarar constantes use public static final;\n"
                + "\n"
                + "·    goto: Não foi implementada na linguagem Java por ser considerada perigosa.");
    }

}
